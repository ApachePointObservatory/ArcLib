# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""Python interface to CArcDeinterlace C++ code."""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ArcPCI
else:
    import _ArcPCI

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _ArcPCI.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ArcPCI.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _ArcPCI.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _ArcPCI.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _ArcPCI.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _ArcPCI.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _ArcPCI.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _ArcPCI.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _ArcPCI.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _ArcPCI.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _ArcPCI.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _ArcPCI.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _ArcPCI.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _ArcPCI.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _ArcPCI.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _ArcPCI.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _ArcPCI.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _ArcPCI.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ArcPCI:
_ArcPCI.SwigPyIterator_swigregister(SwigPyIterator)
class vectorstr(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vectorstr self) -> SwigPyIterator"""
        return _ArcPCI.vectorstr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vectorstr self) -> bool"""
        return _ArcPCI.vectorstr___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vectorstr self) -> bool"""
        return _ArcPCI.vectorstr___bool__(self)

    def __len__(self):
        r"""__len__(vectorstr self) -> std::vector< std::string >::size_type"""
        return _ArcPCI.vectorstr___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vectorstr self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> vectorstr"""
        return _ArcPCI.vectorstr___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vectorstr self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(vectorstr self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, vectorstr v)
        """
        return _ArcPCI.vectorstr___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vectorstr self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _ArcPCI.vectorstr___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vectorstr self, std::vector< std::string >::difference_type i)
        __delitem__(vectorstr self, SWIGPY_SLICEOBJECT * slice)
        """
        return _ArcPCI.vectorstr___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vectorstr self, SWIGPY_SLICEOBJECT * slice) -> vectorstr
        __getitem__(vectorstr self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _ArcPCI.vectorstr___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vectorstr self, SWIGPY_SLICEOBJECT * slice, vectorstr v)
        __setitem__(vectorstr self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(vectorstr self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _ArcPCI.vectorstr___setitem__(self, *args)

    def pop(self):
        r"""pop(vectorstr self) -> std::vector< std::string >::value_type"""
        return _ArcPCI.vectorstr_pop(self)

    def append(self, x):
        r"""append(vectorstr self, std::vector< std::string >::value_type const & x)"""
        return _ArcPCI.vectorstr_append(self, x)

    def empty(self):
        r"""empty(vectorstr self) -> bool"""
        return _ArcPCI.vectorstr_empty(self)

    def size(self):
        r"""size(vectorstr self) -> std::vector< std::string >::size_type"""
        return _ArcPCI.vectorstr_size(self)

    def swap(self, v):
        r"""swap(vectorstr self, vectorstr v)"""
        return _ArcPCI.vectorstr_swap(self, v)

    def begin(self):
        r"""begin(vectorstr self) -> std::vector< std::string >::iterator"""
        return _ArcPCI.vectorstr_begin(self)

    def end(self):
        r"""end(vectorstr self) -> std::vector< std::string >::iterator"""
        return _ArcPCI.vectorstr_end(self)

    def rbegin(self):
        r"""rbegin(vectorstr self) -> std::vector< std::string >::reverse_iterator"""
        return _ArcPCI.vectorstr_rbegin(self)

    def rend(self):
        r"""rend(vectorstr self) -> std::vector< std::string >::reverse_iterator"""
        return _ArcPCI.vectorstr_rend(self)

    def clear(self):
        r"""clear(vectorstr self)"""
        return _ArcPCI.vectorstr_clear(self)

    def get_allocator(self):
        r"""get_allocator(vectorstr self) -> std::vector< std::string >::allocator_type"""
        return _ArcPCI.vectorstr_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vectorstr self)"""
        return _ArcPCI.vectorstr_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vectorstr self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(vectorstr self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _ArcPCI.vectorstr_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vectorstr self) -> vectorstr
        __init__(vectorstr self, vectorstr other) -> vectorstr
        __init__(vectorstr self, std::vector< std::string >::size_type size) -> vectorstr
        __init__(vectorstr self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> vectorstr
        """
        _ArcPCI.vectorstr_swiginit(self, _ArcPCI.new_vectorstr(*args))

    def push_back(self, x):
        r"""push_back(vectorstr self, std::vector< std::string >::value_type const & x)"""
        return _ArcPCI.vectorstr_push_back(self, x)

    def front(self):
        r"""front(vectorstr self) -> std::vector< std::string >::value_type const &"""
        return _ArcPCI.vectorstr_front(self)

    def back(self):
        r"""back(vectorstr self) -> std::vector< std::string >::value_type const &"""
        return _ArcPCI.vectorstr_back(self)

    def assign(self, n, x):
        r"""assign(vectorstr self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _ArcPCI.vectorstr_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vectorstr self, std::vector< std::string >::size_type new_size)
        resize(vectorstr self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _ArcPCI.vectorstr_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vectorstr self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(vectorstr self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _ArcPCI.vectorstr_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vectorstr self, std::vector< std::string >::size_type n)"""
        return _ArcPCI.vectorstr_reserve(self, n)

    def capacity(self):
        r"""capacity(vectorstr self) -> std::vector< std::string >::size_type"""
        return _ArcPCI.vectorstr_capacity(self)
    __swig_destroy__ = _ArcPCI.delete_vectorstr

# Register vectorstr in _ArcPCI:
_ArcPCI.vectorstr_swigregister(vectorstr)
class CArcPCI(object):
    r"""Proxy of C++ arc::gen3::CArcPCI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CArcPCI self) -> CArcPCI"""
        _ArcPCI.CArcPCI_swiginit(self, _ArcPCI.new_CArcPCI())
    __swig_destroy__ = _ArcPCI.delete_CArcPCI

    def toString(self):
        r"""toString(CArcPCI self) -> std::string_view"""
        return _ArcPCI.CArcPCI_toString(self)

    def getCfgSpByte(self, uiOffset):
        r"""getCfgSpByte(CArcPCI self, std::uint32_t const uiOffset) -> std::uint32_t"""
        return _ArcPCI.CArcPCI_getCfgSpByte(self, uiOffset)

    def getCfgSpWord(self, uiOffset):
        r"""getCfgSpWord(CArcPCI self, std::uint32_t const uiOffset) -> std::uint32_t"""
        return _ArcPCI.CArcPCI_getCfgSpWord(self, uiOffset)

    def getCfgSpDWord(self, uiOffset):
        r"""getCfgSpDWord(CArcPCI self, std::uint32_t const uiOffset) -> std::uint32_t"""
        return _ArcPCI.CArcPCI_getCfgSpDWord(self, uiOffset)

    def setCfgSpByte(self, uiOffset, uiValue):
        r"""setCfgSpByte(CArcPCI self, std::uint32_t const uiOffset, std::uint32_t const uiValue)"""
        return _ArcPCI.CArcPCI_setCfgSpByte(self, uiOffset, uiValue)

    def setCfgSpWord(self, uiOffset, uiValue):
        r"""setCfgSpWord(CArcPCI self, std::uint32_t const uiOffset, std::uint32_t const uiValue)"""
        return _ArcPCI.CArcPCI_setCfgSpWord(self, uiOffset, uiValue)

    def setCfgSpDWord(self, uiOffset, uiValue):
        r"""setCfgSpDWord(CArcPCI self, std::uint32_t const uiOffset, std::uint32_t const uiValue)"""
        return _ArcPCI.CArcPCI_setCfgSpDWord(self, uiOffset, uiValue)

    def getCfgSp(self):
        r"""getCfgSp(CArcPCI self)"""
        return _ArcPCI.CArcPCI_getCfgSp(self)

    def getBarSp(self):
        r"""getBarSp(CArcPCI self)"""
        return _ArcPCI.CArcPCI_getBarSp(self)

    @staticmethod
    def findDevices():
        r"""findDevices()"""
        return _ArcPCI.CArcPCI_findDevices()

    @staticmethod
    def deviceCount():
        r"""deviceCount() -> std::uint32_t"""
        return _ArcPCI.CArcPCI_deviceCount()

    def isOpen(self):
        r"""isOpen(CArcPCI self) -> bool"""
        return _ArcPCI.CArcPCI_isOpen(self)

    def open(self, *args):
        r"""
        open(CArcPCI self, std::uint32_t const uiDeviceNumber=0)
        open(CArcPCI self, std::uint32_t const uiDeviceNumber, std::uint32_t const uiBytes)
        open(CArcPCI self, std::uint32_t const uiDeviceNumber, std::uint32_t const uiRows, std::uint32_t const uiCols)
        """
        return _ArcPCI.CArcPCI_open(self, *args)

    def close(self):
        r"""close(CArcPCI self)"""
        return _ArcPCI.CArcPCI_close(self)

    def reset(self):
        r"""reset(CArcPCI self)"""
        return _ArcPCI.CArcPCI_reset(self)

    def getCommonBufferProperties(self):
        r"""getCommonBufferProperties(CArcPCI self) -> bool"""
        return _ArcPCI.CArcPCI_getCommonBufferProperties(self)

    def mapCommonBuffer(self, uiBytes=0):
        r"""mapCommonBuffer(CArcPCI self, std::size_t uiBytes=0)"""
        return _ArcPCI.CArcPCI_mapCommonBuffer(self, uiBytes)

    def unMapCommonBuffer(self):
        r"""unMapCommonBuffer(CArcPCI self)"""
        return _ArcPCI.CArcPCI_unMapCommonBuffer(self)

    def getId(self):
        r"""getId(CArcPCI self) -> std::uint32_t"""
        return _ArcPCI.CArcPCI_getId(self)

    def getStatus(self):
        r"""getStatus(CArcPCI self) -> std::uint32_t"""
        return _ArcPCI.CArcPCI_getStatus(self)

    def clearStatus(self):
        r"""clearStatus(CArcPCI self)"""
        return _ArcPCI.CArcPCI_clearStatus(self)

    def set2xFOTransmitter(self, bOnOff):
        r"""set2xFOTransmitter(CArcPCI self, bool bOnOff)"""
        return _ArcPCI.CArcPCI_set2xFOTransmitter(self, bOnOff)

    def loadDeviceFile(self, tFile):
        r"""loadDeviceFile(CArcPCI self, std::filesystem::path const & tFile)"""
        return _ArcPCI.CArcPCI_loadDeviceFile(self, tFile)

    def command(self, tCmdList):
        r"""command(CArcPCI self, std::initializer_list< std::uint32_t const > const & tCmdList) -> std::uint32_t"""
        return _ArcPCI.CArcPCI_command(self, tCmdList)

    def getControllerId(self):
        r"""getControllerId(CArcPCI self) -> std::uint32_t"""
        return _ArcPCI.CArcPCI_getControllerId(self)

    def resetController(self):
        r"""resetController(CArcPCI self)"""
        return _ArcPCI.CArcPCI_resetController(self)

    def isControllerConnected(self):
        r"""isControllerConnected(CArcPCI self) -> bool"""
        return _ArcPCI.CArcPCI_isControllerConnected(self)

    def stopExposure(self):
        r"""stopExposure(CArcPCI self)"""
        return _ArcPCI.CArcPCI_stopExposure(self)

    def isReadout(self):
        r"""isReadout(CArcPCI self) -> bool"""
        return _ArcPCI.CArcPCI_isReadout(self)

    def getPixelCount(self):
        r"""getPixelCount(CArcPCI self) -> std::uint32_t"""
        return _ArcPCI.CArcPCI_getPixelCount(self)

    def getCRPixelCount(self):
        r"""getCRPixelCount(CArcPCI self) -> std::uint32_t"""
        return _ArcPCI.CArcPCI_getCRPixelCount(self)

    def getFrameCount(self):
        r"""getFrameCount(CArcPCI self) -> std::uint32_t"""
        return _ArcPCI.CArcPCI_getFrameCount(self)

    def setHCTR(self, uiVal):
        r"""setHCTR(CArcPCI self, std::uint32_t const uiVal)"""
        return _ArcPCI.CArcPCI_setHCTR(self, uiVal)

    def getHSTR(self):
        r"""getHSTR(CArcPCI self) -> std::uint32_t"""
        return _ArcPCI.CArcPCI_getHSTR(self)

    def getHCTR(self):
        r"""getHCTR(CArcPCI self) -> std::uint32_t"""
        return _ArcPCI.CArcPCI_getHCTR(self)

    def PCICommand(self, uiCommand):
        r"""PCICommand(CArcPCI self, std::uint32_t const uiCommand) -> std::uint32_t"""
        return _ArcPCI.CArcPCI_PCICommand(self, uiCommand)
    ASTROPCI_GET_HCTR = _ArcPCI.CArcPCI_ASTROPCI_GET_HCTR
    
    ASTROPCI_GET_PROGRESS = _ArcPCI.CArcPCI_ASTROPCI_GET_PROGRESS
    
    ASTROPCI_GET_DMA_ADDR = _ArcPCI.CArcPCI_ASTROPCI_GET_DMA_ADDR
    
    ASTROPCI_GET_HSTR = _ArcPCI.CArcPCI_ASTROPCI_GET_HSTR
    
    ASTROPCI_MEM_MAP = _ArcPCI.CArcPCI_ASTROPCI_MEM_MAP
    
    ASTROPCI_GET_DMA_SIZE = _ArcPCI.CArcPCI_ASTROPCI_GET_DMA_SIZE
    
    ASTROPCI_GET_FRAMES_READ = _ArcPCI.CArcPCI_ASTROPCI_GET_FRAMES_READ
    
    ASTROPCI_HCVR_DATA = _ArcPCI.CArcPCI_ASTROPCI_HCVR_DATA
    
    ASTROPCI_SET_HCTR = _ArcPCI.CArcPCI_ASTROPCI_SET_HCTR
    
    ASTROPCI_SET_HCVR = _ArcPCI.CArcPCI_ASTROPCI_SET_HCVR
    
    ASTROPCI_PCI_DOWNLOAD = _ArcPCI.CArcPCI_ASTROPCI_PCI_DOWNLOAD
    
    ASTROPCI_PCI_DOWNLOAD_WAIT = _ArcPCI.CArcPCI_ASTROPCI_PCI_DOWNLOAD_WAIT
    
    ASTROPCI_COMMAND = _ArcPCI.CArcPCI_ASTROPCI_COMMAND
    
    ASTROPCI_MEM_UNMAP = _ArcPCI.CArcPCI_ASTROPCI_MEM_UNMAP
    
    ASTROPCI_ABORT = _ArcPCI.CArcPCI_ASTROPCI_ABORT
    
    ASTROPCI_CONTROLLER_DOWNLOAD = _ArcPCI.CArcPCI_ASTROPCI_CONTROLLER_DOWNLOAD
    
    ASTROPCI_GET_CR_PROGRESS = _ArcPCI.CArcPCI_ASTROPCI_GET_CR_PROGRESS
    
    ASTROPCI_GET_DMA_LO_ADDR = _ArcPCI.CArcPCI_ASTROPCI_GET_DMA_LO_ADDR
    
    ASTROPCI_GET_DMA_HI_ADDR = _ArcPCI.CArcPCI_ASTROPCI_GET_DMA_HI_ADDR
    
    ASTROPCI_GET_CONFIG_BYTE = _ArcPCI.CArcPCI_ASTROPCI_GET_CONFIG_BYTE
    
    ASTROPCI_GET_CONFIG_WORD = _ArcPCI.CArcPCI_ASTROPCI_GET_CONFIG_WORD
    
    ASTROPCI_GET_CONFIG_DWORD = _ArcPCI.CArcPCI_ASTROPCI_GET_CONFIG_DWORD
    
    ASTROPCI_SET_CONFIG_BYTE = _ArcPCI.CArcPCI_ASTROPCI_SET_CONFIG_BYTE
    
    ASTROPCI_SET_CONFIG_WORD = _ArcPCI.CArcPCI_ASTROPCI_SET_CONFIG_WORD
    
    ASTROPCI_SET_CONFIG_DWORD = _ArcPCI.CArcPCI_ASTROPCI_SET_CONFIG_DWORD
    
    HTF_BIT_MASK = _ArcPCI.CArcPCI_HTF_BIT_MASK
    
    ePCIStatus_TIMEOUT_STATUS = _ArcPCI.CArcPCI_ePCIStatus_TIMEOUT_STATUS
    
    ePCIStatus_DONE_STATUS = _ArcPCI.CArcPCI_ePCIStatus_DONE_STATUS
    
    ePCIStatus_READ_REPLY_STATUS = _ArcPCI.CArcPCI_ePCIStatus_READ_REPLY_STATUS
    
    ePCIStatus_ERROR_STATUS = _ArcPCI.CArcPCI_ePCIStatus_ERROR_STATUS
    
    ePCIStatus_SYSTEM_RESET_STATUS = _ArcPCI.CArcPCI_ePCIStatus_SYSTEM_RESET_STATUS
    
    ePCIStatus_READOUT_STATUS = _ArcPCI.CArcPCI_ePCIStatus_READOUT_STATUS
    
    ePCIStatus_BUSY_STATUS = _ArcPCI.CArcPCI_ePCIStatus_BUSY_STATUS
    
    PCI_RESET = _ArcPCI.CArcPCI_PCI_RESET
    
    ABORT_READOUT = _ArcPCI.CArcPCI_ABORT_READOUT
    
    BOOT_EEPROM = _ArcPCI.CArcPCI_BOOT_EEPROM
    
    READ_HEADER = _ArcPCI.CArcPCI_READ_HEADER
    
    RESET_CONTROLLER = _ArcPCI.CArcPCI_RESET_CONTROLLER
    
    INITIALIZE_IMAGE_ADDRESS = _ArcPCI.CArcPCI_INITIALIZE_IMAGE_ADDRESS
    
    WRITE_COMMAND = _ArcPCI.CArcPCI_WRITE_COMMAND
    
    HTF_MASK = _ArcPCI.CArcPCI_HTF_MASK
    
    HTF_CLEAR_MASK = _ArcPCI.CArcPCI_HTF_CLEAR_MASK
    
    MAX_PCI_COMM_TEST = _ArcPCI.CArcPCI_MAX_PCI_COMM_TEST
    
    PCI_COM_TEST_VALUE = _ArcPCI.CArcPCI_PCI_COM_TEST_VALUE
    

    def commonBufferVA(self):
        r"""commonBufferVA(CArcPCI self) -> std::uint8_t"""
        return _ArcPCI.CArcPCI_commonBufferVA(self)

    def commonBufferVA_uint16(self):
        r"""commonBufferVA_uint16(CArcPCI self) -> std::uint16_t"""
        return _ArcPCI.CArcPCI_commonBufferVA_uint16(self)

    def getDeviceStringList(self):
        r"""getDeviceStringList(CArcPCI self) -> vectorstr"""
        return _ArcPCI.CArcPCI_getDeviceStringList(self)

# Register CArcPCI in _ArcPCI:
_ArcPCI.CArcPCI_swigregister(CArcPCI)

