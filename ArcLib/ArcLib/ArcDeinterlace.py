# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""Python interface to CArcDeinterlace C++ code."""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ArcDeinterlace
else:
    import _ArcDeinterlace

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


e_Alg_NONE = _ArcDeinterlace.e_Alg_NONE

e_Alg_PARALLEL = _ArcDeinterlace.e_Alg_PARALLEL

e_Alg_SERIAL = _ArcDeinterlace.e_Alg_SERIAL

e_Alg_QUAD_CCD = _ArcDeinterlace.e_Alg_QUAD_CCD

e_Alg_QUAD_IR = _ArcDeinterlace.e_Alg_QUAD_IR

e_Alg_QUAD_IR_CDS = _ArcDeinterlace.e_Alg_QUAD_IR_CDS

e_Alg_HAWAII_RG = _ArcDeinterlace.e_Alg_HAWAII_RG

e_Alg_STA1600 = _ArcDeinterlace.e_Alg_STA1600

e_Alg_CUSTOM = _ArcDeinterlace.e_Alg_CUSTOM

class arcDeinterlaceUint16(object):
    r"""Proxy of C++ arc::gen3::CArcDeinterlace< arc::gen3::dlace::BPP_16 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(arcDeinterlaceUint16 self) -> arcDeinterlaceUint16"""
        _ArcDeinterlace.arcDeinterlaceUint16_swiginit(self, _ArcDeinterlace.new_arcDeinterlaceUint16())
    __swig_destroy__ = _ArcDeinterlace.delete_arcDeinterlaceUint16

    @staticmethod
    def version():
        r"""version() -> std::string const"""
        return _ArcDeinterlace.arcDeinterlaceUint16_version()

    def run(self, *args):
        r"""
        run(arcDeinterlaceUint16 self, std::uint16_t * pBuf, std::uint32_t const uiCols, std::uint32_t const uiRows, arc::gen3::dlace::e_Alg eAlg, std::initializer_list< std::uint32_t > const & tArgList={})
        run(arcDeinterlaceUint16 self, std::uint16_t * pBuf, std::uint32_t const uiCols, std::uint32_t const uiRows, std::string const & sAlg, std::initializer_list< std::uint32_t > const & tArgList={})
        """
        return _ArcDeinterlace.arcDeinterlaceUint16_run(self, *args)

    @staticmethod
    def getPluginManager():
        r"""getPluginManager() -> arc::gen3::CArcPluginManager *"""
        return _ArcDeinterlace.arcDeinterlaceUint16_getPluginManager()

    def maxTVal(self):
        r"""maxTVal(arcDeinterlaceUint16 self) -> std::uint32_t"""
        return _ArcDeinterlace.arcDeinterlaceUint16_maxTVal(self)

# Register arcDeinterlaceUint16 in _ArcDeinterlace:
_ArcDeinterlace.arcDeinterlaceUint16_swigregister(arcDeinterlaceUint16)
class arcDeinterlaceUint32(object):
    r"""Proxy of C++ arc::gen3::CArcDeinterlace< arc::gen3::dlace::BPP_32 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(arcDeinterlaceUint32 self) -> arcDeinterlaceUint32"""
        _ArcDeinterlace.arcDeinterlaceUint32_swiginit(self, _ArcDeinterlace.new_arcDeinterlaceUint32())
    __swig_destroy__ = _ArcDeinterlace.delete_arcDeinterlaceUint32

    @staticmethod
    def version():
        r"""version() -> std::string const"""
        return _ArcDeinterlace.arcDeinterlaceUint32_version()

    def run(self, *args):
        r"""
        run(arcDeinterlaceUint32 self, std::uint32_t * pBuf, std::uint32_t const uiCols, std::uint32_t const uiRows, arc::gen3::dlace::e_Alg eAlg, std::initializer_list< std::uint32_t > const & tArgList={})
        run(arcDeinterlaceUint32 self, std::uint32_t * pBuf, std::uint32_t const uiCols, std::uint32_t const uiRows, std::string const & sAlg, std::initializer_list< std::uint32_t > const & tArgList={})
        """
        return _ArcDeinterlace.arcDeinterlaceUint32_run(self, *args)

    @staticmethod
    def getPluginManager():
        r"""getPluginManager() -> arc::gen3::CArcPluginManager *"""
        return _ArcDeinterlace.arcDeinterlaceUint32_getPluginManager()

    def maxTVal(self):
        r"""maxTVal(arcDeinterlaceUint32 self) -> std::uint32_t"""
        return _ArcDeinterlace.arcDeinterlaceUint32_maxTVal(self)

# Register arcDeinterlaceUint32 in _ArcDeinterlace:
_ArcDeinterlace.arcDeinterlaceUint32_swigregister(arcDeinterlaceUint32)

